#pragma once
#include <stdint.h>
#include "cpu.h"

typedef enum mos_opcode_error {
  E_OPCODE_OK,
  E_OPCODE_FAILED,
} mos_opcode_error_t;

typedef enum mos_opcodes {
  BRK_00=0x00,
  ORA_01=0x01,
  STP_02=0x02,
  SLO_03=0x03,
  NOP_04=0x04,
  ORA_05=0x05,
  ASL_06=0x06,
  SLO_07=0x07,
  PHP_08=0x08,
  ORA_09=0x09,
  ASL_0A=0x0A,
  ANC_0B=0x0B,
  NOP_0C=0x0C,
  ORA_0D=0x0D,
  ASL_0E=0x0E,
  SLO_0F=0x0F,
  BPL_10=0x10,
  ORA_11=0x11,
  STP_12=0x12,
  SLO_13=0x13,
  NOP_14=0x14,
  ORA_15=0x15,
  ASL_16=0x16,
  SLO_17=0x17,
  CLC_18=0x18,
  ORA_19=0x19,
  NOP_1A=0x1A,
  SLO_1B=0x1B,
  NOP_1C=0x1C,
  ORA_1D=0x1D,
  ASL_1E=0x1E,
  SLO_1F=0x1F,

  JSR_20=0x20,
  AND_21=0x21,
  STP_22=0x22,
  RLA_23=0x23,
  BIT_24=0x24,
  AND_25=0x25,
  ROL_26=0x26,
  RLA_27=0x27,
  PLP_28=0x28,
  AND_29=0x29,
  ROL_2A=0x2A,
  ANC_2B=0x2B,
  BIT_2C=0x2C,
  AND_2D=0x2D,
  ROL_2E=0x2E,
  RLA_2F=0x2F,
  BMI_30=0x30,
  AND_31=0x31,
  STP_32=0x32,
  RLA_33=0x33,
  NOP_34=0x34,
  AND_35=0x35,
  ROL_36=0x36,
  RLA_37=0x37,
  SEC_38=0x38,
  AND_39=0x39,
  NOP_3A=0x3A,
  RLA_3B=0x3B,
  NOP_3C=0x3C,
  AND_3D=0x3D,
  ROL_3E=0x3E,
  RLA_3F=0x3F,

  RTI_40=0x40,
  EOR_41=0x41,
  STP_42=0x42,
  SRE_43=0x43,
  NOP_44=0x44,
  EOR_45=0x45,
  LSR_46=0x46,
  SRE_47=0x47,
  PHA_48=0x48,
  EOR_49=0x49,
  LSR_4A=0x4A,
  ALR_4B=0x4B,
  JMP_4C=0x4C,
  EOR_4D=0x4D,
  LSR_4E=0x4E,
  SRE_4F=0x4F,
  BVC_50=0x50,
  EOR_51=0x51,
  STP_52=0x52,
  SRE_53=0x53,
  NOP_54=0x54,
  EOR_55=0x55,
  LSR_56=0x56,
  SRE_57=0x57,
  CLI_58=0x58,
  EOR_59=0x59,
  NOP_5A=0x5A,
  SRE_5B=0x5B,
  NOP_5C=0x5C,
  EOR_5D=0x5D,
  LSR_5E=0x5E,
  SRE_5F=0x5F,

  RTS_60=0x60,
  ADC_61=0x61,
  STP_62=0x62,
  RRA_63=0x63,
  NOP_64=0x64,
  ADC_65=0x65,
  ROR_66=0x66,
  RRA_67=0x67,
  PLA_68=0x68,
  ADC_69=0x69,
  ROR_6A=0x6A,
  ARR_6B=0x6B,
  JMP_6C=0x6C,
  ADC_6D=0x6D,
  ROR_6E=0x6E,
  RRA_6F=0x6F,
  BVS_70=0x70,
  ADC_71=0x71,
  STP_72=0x72,
  RRA_73=0x73,
  NOP_74=0x74,
  ADC_75=0x75,
  ROR_76=0x76,
  RRA_77=0x77,
  SEI_78=0x78,
  ADC_79=0x79,
  NOP_7A=0x7A,
  RRA_7B=0x7B,
  NOP_7C=0x7C,
  ADC_7D=0x7D,
  ROR_7E=0x7E,
  RRA_7F=0x7F,

  NOP_80=0x80,
  STA_81=0x81,
  NOP_82=0x82,
  SAX_83=0x83,
  STY_84=0x84,
  STA_85=0x85,
  STX_86=0x86,
  SAX_87=0x87,
  DEY_88=0x88,
  NOP_89=0x89,
  TXA_8A=0x8A,
  XAA_8B=0x8B,
  STY_8C=0x8C,
  STA_8D=0x8D,
  STX_8E=0x8E,
  SAX_8F=0x8F,
  BCC_90=0x90,
  STA_91=0x91,
  STP_92=0x92,
  AHX_93=0x93,
  STY_94=0x94,
  STA_95=0x95,
  STX_96=0x96,
  SAX_97=0x97,
  TYA_98=0x98,
  STA_99=0x99,
  TXS_9A=0x9A,
  TAS_9B=0x9B,
  SHY_9C=0x9C,
  STA_9D=0x9D,
  SHX_9E=0x9E,
  AHX_9F=0x9F,

  LDY_A0=0xA0,
  LDA_A1=0xA1,
  LDX_A2=0xA2,
  LAX_A3=0xA3,
  LDY_A4=0xA4,
  LDA_A5=0xA5,
  LDX_A6=0xA6,
  LAX_A7=0xA7,
  TAY_A8=0xA8,
  LDA_A9=0xA9,
  TAX_AA=0xAA,
  LAX_AB=0xAB,
  LDY_AC=0xAC,
  LDA_AD=0xAD,
  LDX_AE=0xAE,
  LAX_AF=0xAF,
  BCS_B0=0xB0,
  LDA_B1=0xB1,
  STP_B2=0xB2,
  LAX_B3=0xB3,
  LDY_B4=0xB4,
  LDA_B5=0xB5,
  LDX_B6=0xB6,
  LAX_B7=0xB7,
  CLV_B8=0xB8,
  LDA_B9=0xB9,
  TSX_BA=0xBA,
  LAS_BB=0xBB,
  LDY_BC=0xBC,
  LDA_BD=0xBD,
  LDX_BE=0xBE,
  LAX_BF=0xBF,

  CPY_C0=0xC0,
  CMP_C1=0xC1,
  NOP_C2=0xC2,
  DCP_C3=0xC3,
  CPY_C4=0xC4,
  CMP_C5=0xC5,
  DEC_C6=0xC6,
  DCP_C7=0xC7,
  INY_C8=0xC8,
  CMP_C9=0xC9,
  DEX_CA=0xCA,
  AXS_CB=0xCB,
  CPY_CC=0xCC,
  CMP_CD=0xCD,
  DEC_CE=0xCE,
  DCP_CF=0xCF,
  BNE_D0=0xD0,
  CMP_D1=0xD1,
  STP_D2=0xD2,
  DCP_D3=0xD3,
  NOP_D4=0xD4,
  CMP_D5=0xD5,
  DEC_D6=0xD6,
  DCP_D7=0xD7,
  CLD_D8=0xD8,
  CMP_D9=0xD9,
  NOP_DA=0xDA,
  DCP_DB=0xDB,
  NOP_DC=0xDC,
  CMP_DD=0xDD,
  DEC_DE=0xDE,
  DCP_DF=0xDF,

  CPX_E0=0xE0,
  SBC_E1=0xE1,
  NOP_E2=0xE2,
  ISC_E3=0xE3,
  CPX_E4=0xE4,
  SBC_E5=0xE5,
  INC_E6=0xE6,
  ISC_E7=0xE7,
  INX_E8=0xE8,
  SBC_E9=0xE9,
  NOP_EA=0xEA,
  SBC_EB=0xEB,
  CPX_EC=0xEC,
  SBC_ED=0xED,
  INC_EE=0xEE,
  ISC_EF=0xEF,
  BEQ_F0=0xF0,
  SBC_F1=0xF1,
  STP_F2=0xF2,
  ISC_F3=0xF3,
  NOP_F4=0xF4,
  SBC_F5=0xF5,
  INC_F6=0xF6,
  ISC_F7=0xF7,
  SED_F8=0xF8,
  SBC_F9=0xF9,
  NOP_FA=0xFA,
  ISC_FB=0xFB,
  NOP_FC=0xFC,
  SBC_FD=0xFD,
  INC_FE=0xFE,
  ISC_FF=0xFF,

} mos_opcodes_t;

// TODO: add register context
typedef mos_opcode_error_t (*mos_opcode_operation)(mos_cpu_ctx_t *ctx, uint8_t *operands, uint8_t num_operands);
typedef struct mos_opcode {
  uint8_t code;
  uint8_t num_operands;
  mos_opcode_operation f;
} mos_opcode_t;
